#!/bin/sh

#    DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#                    Version 2, December 2004
#
# Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>
#
# Everyone is permitted to copy and distribute verbatim or modified
# copies of this license document, and changing it is allowed as long
# as the name is changed.
#
#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
#
#  0. You just DO WHAT THE FUCK YOU WANT TO.


# Builds with gcc.  Could work with others, but IDK if they provide the
# profiler and debugging info.

name=$(basename "$PWD")
src_file='main.c'
binary_file='main'
app_image_file="$name-$(uname -m).AppImage"

CFLAGS="-Wall -Wextra -Werror -rdynamic $CFLAGS"

if [ -f jcc.env ]; then
    . "$PWD/jcc.env"
fi

cmd="$1"
if [ -z "$cmd" ]; then
    #cmd='run'
    cmd='run-appimage'
fi

log() {
    [ -z "$LOG" ] || echo "LOG: $1" >&2
}

build() {
    extra_flags="$1"
    log "extra_flags: $extra_flags"

    log 'build'
#    time -f 'compile: %e seconds' gcc $CFLAGS $extra_flags -o "$binary_file" "$src_file" $lib_flags
    log 'compile time'
    time gcc $CFLAGS $extra_flags -o "$binary_file" "$src_file" $lib_flags
}

debug() {
    log 'debug'
    build '-Og -g' && gdb "$binary_file"
}

profile() {
    log 'profile'
    build '-fprofile-arcs -pg' && "./$binary_file" $run_args
    gprof --brief "$binary_file" gmon.out > "$binary_file.profile"
}

run() {
    log 'run'
    build '-Og' && ./"$binary_file" $run_args
}

gup()
{
    git pull --rebase --recurse-submodules && git submodule sync --recursive && git submodule update --init --recursive --remote --rebase
}

gpush()
{
    git push --recurse-submodules=on-demand
}

init_web()
{
    echo init web app
    cp -avn fu/tools/templates/web/. ./
    exit
}

# currently directly saving images here, but should it be possible to delete
# the AppDir and have it rebuilt?  If an image atlas is used that would need to
# be generated, etc as part of the build?  generating multiple resolutions
# of a high res source?
appimage() {
    log 'appimage'
    build '-Og' &&
        cp "$binary_file" AppDir/AppRun &&
        ./fu/tools/appimagetool-x86_64.AppImage AppDir/ "$app_image_file"
}

run_appimage() {
    export FU_DEV="$USER"

    log 'run_appimage'
    appimage && ./"$app_image_file" $run_args
}

# eventually should download the latest and build a static lib
# needs -pthread -ldl for lib_flags
update_sqlite() {
    echo 'updating sqlite' >&2
    gcc -c -DSQLITE_ENABLE_RTREE=1 -o sqlite3.o sqlite3.c
    # TODO(jason): I think this is probably unnecessary and the sqlite3.o could
    # be provided the same way instead
    ar rcs libsqlite3.a sqlite3.o
}

clean() {
    log 'clean'
    [ ! -e "$binary_file" ] || rm "$binary_file"
    rm -f gmon.out "$binary_file.profile" main.gcda

    exit 0
}

if [ "$cmd" = 'init-web' ]; then
    init_web "$2"
elif [ ! -d AppDir ]; then
    echo "missing AppDir.  run ./jcc init-web" >&2
    exit 2
fi

if [ ! -e libsqlite3.a ]; then
    update_sqlite
fi

if [ "$cmd" = 'build' ]; then
    build
elif [ "$cmd" = 'appimage' ]; then
    appimage
elif [ "$cmd" = 'run-appimage' ]; then
    run_appimage
elif [ "$cmd" = 'clean' ]; then
    clean
elif [ "$cmd" = 'debug' ]; then
    debug
elif [ "$cmd" = 'profile' ]; then
    profile
elif [ "$cmd" = 'run' ]; then
    run
elif [ "$cmd" = 'gup' ]; then
    gup
elif [ "$cmd" = 'gpush' ]; then
    gpush
elif [ "$cmd" = 'update-sqlite' ]; then
    update_sqlite
else
    # build to /tmp
    name=$(mktemp)
    src_file="$cmd"
    run "$name"
    rm "$name"
fi

